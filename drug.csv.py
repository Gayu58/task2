# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yk9ZX8YvJFueFcoSuIUJbsQZVK4mVgX-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Layer, Dense, Dropout

data = pd.read_CSV("/content/drug200.csv")
data.head()

data.isnull().sum()

#Remoivng Redundant attributes from dataset
data.drop(['TSH_measured','T3_measured','TT4_measured','T4U_measured','FIT_measured','TBG_meaasured','referral_source','patient_ic'])

#re-mapping target values to diagnostic group
diagnoses = {'A': 'hyperthyroid conditions',
             'B': 'hyperthyroid conditions',
             'C': 'hyperthyroid conditions',
             'D': 'hyperthyroid conditions',
             'E': 'hyperthyroid conditions',
             'F': 'hyperthyroid conditions',
             'G': 'hyperthyroid conditions',
             'H': 'hyperthyroid conditions',
             'I': 'binding protein',
             'J': 'binding protein',
             'K': 'general health',
             'L': 'replacement therapy',
             'M': 'replacement therapy',
             'N': 'replacement therapy',
             'O': 'antithyroid treatment',
             'P': 'antithyroid treatment',
             'Q': 'antithyorid treatment',
             'R': 'miscellaneous',
             'S': 'miscellaneous',
             'T': 'miscellaneous',
data['target'] = data['target'].map(dianoses)  #remapping

data.dropna(subset=['target'],inplace= True)
data['target'].value_counts()

#splitting the data values as x and y
X= data.iloc[:,0:-1]
Y= data.iloc[:,-1]

X['sex'].unique()
array(['F', 'M', nan], dtype=object)
X['sex'].replace(np.nan, 'F', inplace=True)
x['sex'].value_counts(
F 1701
M 536
Name: sex,dtype:int64

x.info()
<class 'pandas.core. frame.DataFrame'>
Int64Index:2237entires, 4to 9169
Data colums (total 22 columns):

#Encoding the categorical data
#Encoding the indendent(output)variable
from sklearn.preprocessing import OrdinalEncoder, LabelEncoder
#categorical data

ordinal_encoder = OrdinalEncoder(dtype ='int64')
x.iloc[:, 1:16] = ordinal_encoder.fit_transform(x.iloc[:,1:16])
#ordinal_encoderr.fit_transform(x[['sex']])

x.replace(np.nan, 'o', inplace=True)
x

label_encoder = LabelEncoder()
y_dt= label_encoder.fit_transform(y)

y=pd.DataFrame(y-dt, columns=['target'])
y

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_bal - sc.fit_transform(x-bal)
x_test)bal=  sc.tramsform(x_test_bal)

x_bal

x.head()

